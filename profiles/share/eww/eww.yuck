;------------------------------------------------------------------------------
; WINDOWS
;------------------------------------------------------------------------------
(defwindow bar
  :monitor 0
  :geometry
    (geometry
      :x "0px"
      :y "0px"
      :width "100%"
      :height "48px"
      :anchor "top center")
  :stacking "bottom"
  :exclusive true
  :focusable true
  (container))

(defwidget container []
  (centerbox
    :class "bar"
    (left)
    (centre)
    (right))
  )


(defwidget centre []
  (box
    :class "centre"
    :halign "center"
    :space-evenly false
    )
  )

;------------------------------------------------------------------------------
; LEFT
;------------------------------------------------------------------------------
(defwidget left []
  (box
    :class "left"
    :halign "start"
    :space-evenly false
    (workspaces))
  )

(deflisten workspaces
  :initial "[]" "~/.config/eww/scripts/get-workspaces.sh")

(deflisten workspace_active
  :initial "1" "~/.config/eww/scripts/get-workspace-active.sh")

(defwidget workspaces []
  (eventbox
    :onscroll "~/.config/eww/scripts/set-workspace.sh {} ${workspace_active}"
    (box
      :space-evenly "true"
      (for workspace in workspaces
        (eventbox
          :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box
            :class "workspace${workspace.id == workspace_active ? "-active" : ""}"
            :space-evenly true
            (label
              :text "${workspace.icon}"))
          )
        )
      )
    )
  )

;------------------------------------------------------------------------------
; RIGHT
;------------------------------------------------------------------------------
(defwidget right []
  (box
    :class "right"
    :halign "end"
    :space-evenly false
    (modules))
  )

(deflisten battery
  :initial " " "~/.config/eww/scripts/battery.sh")

(deflisten network
  :initial " " "~/.config/eww/scripts/network.sh")

(deflisten volume
  :initial " " "~/.config/eww/scripts/volume.sh")

(defpoll time
  :interval "1s" "date '+ %H:%M   %d/%m'")

(defwidget modules []
  (box
    :class "module"
    (label
      :text "${battery}  ${network}  ${volume}  ${time}")
    )
  )
